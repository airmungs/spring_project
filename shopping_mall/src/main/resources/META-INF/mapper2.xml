<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="sailmallDB">


    <!-- 상품 검색 및 페이징 -->
	<select id="search_products" parameterType="map" resultType="shopping_admin.dto.shopping_product_dto">
	    SELECT * FROM products 
	    WHERE 1=1
	    <if test="searchType != null and searchKeyword != null and searchKeyword != ''">
	        <choose>
	            <when test="searchType == 'name'">
	                AND productName LIKE CONCAT('%', #{searchKeyword}, '%')
	            </when>
	            <when test="searchType == 'code'">
	                AND mainCategory LIKE CONCAT('%', #{searchKeyword}, '%')
	            </when>
	        </choose>
	    </if>
	    ORDER BY updatedAt DESC 
	    LIMIT #{pageSize} OFFSET #{offset}
	</select>

    <!-- 총 상품 수 (페이징 계산을 위해 필요) -->
    <select id="count_total_products" parameterType="map" resultType="int">
        SELECT COUNT(*) 
        FROM products
        WHERE 1=1
            <if test="searchType != null and searchKeyword != null and searchKeyword != ''">
                <choose>
                    <when test="searchType == 'name'">
                        AND productName LIKE CONCAT('%', #{searchKeyword}, '%')
                    </when>
                    <when test="searchType == 'code'">
                        AND mainCategory LIKE CONCAT('%', #{searchKeyword}, '%')
                    </when>
                </choose>
            </if>
    </select>

    <!-- 상품 리스트 (페이징 없이 전체 목록) -->
    <select id="get_all_products" resultType="shopping_admin.dto.shopping_product_dto">
        SELECT * FROM products ORDER BY updatedAt DESC;
    </select>

	<!-- 상품코드 중복체크 -->
	<select id="check_product_code_exists" parameterType="String" resultType="int">
        SELECT COUNT(*) FROM products WHERE productCode = #{productCode}
    </select>
    
	<!-- 상품 등록하기 -->
	<insert id="save_product" parameterType="shopping_admin.dto.shopping_product_dto">
	    INSERT INTO products (
	        productCode, mainCategory, productName, productDescription, salePrice, 
	        discountRate, discountedPrice, stockQuantity, saleStatus, earlySoldOut, 
	        mainImage, mainImagePath, additionalImage1, additionalImage1Path, 
	        additionalImage2, additionalImage2Path, productDetails
	    ) VALUES ( 
	        #{productCode}, #{mainCategory}, #{productName}, #{productDescription}, #{salePrice}, 
	        #{discountRate}, #{discountedPrice}, #{stockQuantity}, #{saleStatus}, #{earlySoldOut}, 
	        #{mainImage}, #{mainImagePath}, #{additionalImage1}, #{additionalImage1Path}, 
	        #{additionalImage2}, #{additionalImage2Path}, #{productDetails}
	    )
	</insert>
	
	<!-- 상품등록 페이지 (대메뉴코드 가져오기) -->
	<select id="lg_menu_code" resultType="shopping_admin.dto.shopping_cate_dto">
		SELECT lg_menu_code, cate_name FROM categories;
	</select>
	
	<!-- 카테고리 검색 -->
	<select id="search_category" parameterType="map" resultType="shopping_admin.dto.shopping_cate_dto">
	        SELECT * FROM categories WHERE
	            <choose>
	                <when test="searchType == 'name'">
	                    cate_name LIKE CONCAT('%', #{searchKeyword}, '%')
	                </when>
	                <when test="searchType == 'code'">
	                    lg_menu_code LIKE CONCAT('%', #{searchKeyword}, '%')
	                </when>
	                <otherwise>
	                    1 = 1 <!-- 전체 출력 -->
	                </otherwise>
	            </choose>
	</select>
	
	<!-- 카테고리 리스트 -->
	<select id="cate_list" resultType="shopping_admin.dto.shopping_cate_dto">
		SELECT*FROM categories ORDER BY updated_at DESC;
	</select>
	
	<!-- 카테고리 생성 -->
	<insert id="create_cate" parameterType="shopping_admin.dto.shopping_cate_dto">
	    INSERT INTO categories (category_code, lg_menu_code, cate_name, use_yn)
	    VALUES (#{category_code}, #{lg_menu_code}, #{cate_name}, #{use_yn});
	</insert>
	<!-- 카테고리 분류코드 중복확인 -->
	<select id="check_category_code_exists" parameterType="String" resultType="int">
    	SELECT COUNT(*) FROM categories WHERE category_code = #{categoryCode}
	</select>
	<!-- 쇼핑몰 환경설정 불러오기 -->
	<select id="saved_siteinfo" resultType="shopping_admin.dto.shopping_siteinfo_dto">
		SELECT * FROM siteinfo ORDER BY updated_at DESC LIMIT 1;
	</select>
	
	<!-- 쇼핑몰 환경설정 저장 -->
	<insert id="save_siteinfo" parameterType="shopping_admin.dto.shopping_siteinfo_dto">
	    INSERT INTO siteinfo (
	        siteTitle, adminEmail, usePoints, signupPoints, signupLevel,
	        companyName, businessRegistrationNumber, representativeName,
	        representativeTel, telecommunicationSalesNumber,
	        additionalTelecommunicationNumber, businessPostcode, businessAddress,
	        informationManagerName, informationManagerEmail, bankName,
	        bankAccountNumber, useCreditCard, useMobilePayment, useBookVoucher,
	        minPoints, maxPoints, useCashReceipt, deliveryCompany, deliveryFee,
	        useDesiredDeliveryDate
	    ) VALUES (
	        #{siteTitle}, #{adminEmail}, #{usePoints}, #{signupPoints}, #{signupLevel},
	        #{companyName}, #{businessRegistrationNumber}, #{representativeName},
	        #{representativeTel}, #{telecommunicationSalesNumber},
	        #{additionalTelecommunicationNumber}, #{businessPostcode}, #{businessAddress},
	        #{informationManagerName}, #{informationManagerEmail}, #{bankName},
	        #{bankAccountNumber}, #{useCreditCard}, #{useMobilePayment}, #{useBookVoucher},
	        #{minPoints}, #{maxPoints}, #{useCashReceipt}, #{deliveryCompany}, #{deliveryFee},
	        #{useDesiredDeliveryDate}
	    )
	</insert>
	
	<!-- 관리자 로그인 승인 -->
	<update id="admin_login_status">
		UPDATE adminJoin SET login = #{status} WHERE adid = #{adid}
	</update>
	
	<!-- 관리자 리스트 -->
	<select id="admin_list" resultType="shopping_admin.dto.shopping_admin_dto">
		SELECT*FROM adminJoin WHERE adidx!=1 ORDER BY adidx DESC;
	</select>
	
	<!-- 관리자 로그인 -->
	<select id="admin_login" parameterType="map" resultType="shopping_admin.dto.shopping_admin_dto">
	    SELECT * FROM adminJoin WHERE adid = #{adid} AND adpass = #{adpass}
	</select>
	
	<!-- 관리자 등록 신청 insert -->
	<insert id="admin_insert" parameterType="shopping_admin.dto.shopping_admin_dto">
	INSERT INTO adminJoin (adid, adpass, adname, ademail, adtel, adpart, adposition, addate)
	VALUES (#{adid}, #{adpass}, #{adname}, #{ademail}, #{adtel}, #{adpart}, #{adposition}, now())
	</insert>
	
	<!-- 관리자 등록 신청 ID중복체크 -->
	<select id="admin_idcheck" parameterType="String" resultType="shopping_admin.dto.shopping_admin_dto" >
	SELECT * FROM adminJoin WHERE adid=#{adid}
	</select>

</mapper>
